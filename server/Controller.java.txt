package com.bolsadeideas.springboot.backend.apirest.controllers;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.bolsadeideas.springboot.backend.apirest.models.entity.Cliente;
import com.bolsadeideas.springboot.backend.apirest.models.services.IClienteService;

@CrossOrigin(origins = { "http://localhost:4200" })
@RestController
@RequestMapping("/api")
public class ClienteRestController {

	@Autowired
	private IClienteService clienteService;

	@GetMapping("/clientes")
	public List<Cliente> index() {
		return clienteService.findAll();
	}

	@GetMapping("/clientes/{id}")
	public ResponseEntity<?> show(@PathVariable Long id) {
		Cliente cliente = null;
		Map<String, Object> reponse = new HashMap<String, Object>();
		
		try{
			cliente = clienteService.findById(id); 
		} catch(DataAccessException dae) {
			reponse.put("mensaje","Error al acceder a BBDD con Id ".concat(id.toString()));
			reponse.put("error",e.getMessage());
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.NOT_FOUND);

		}
		if(null == cliente) {
			reponse.put("mensaje","El cliente con Id ".concat(id.toString()).concat(" no existe."));
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.NOT_FOUND);
		}
		

		return new ResponseEntity<Cliente>(cliente,HttpStatus.OK);

	}

	@PostMapping("/clientes/")
	public ResponseEntity<?> create(@RequestBody Cliente cliente) {
		Cliente clienteNew = null;
		
		Map<String, Object> reponse = new HashMap<String, Object>();
		
		
		try{			
  			clienteNew = clienteService.save(cliente);

		} catch(DataAccessException dae) {
			reponse.put("mensaje","Error al insertar en BBDD");
			reponse.put("error",e.getMessage());
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.INTERNAL_SERVER_ERROR);

		}
		
		reponse.put("mensaje","El cliente INSERTADO!!!.");
		reponse.put("cliente",clienteNew);

		return new ResponseEntity<Map<String, Object>>(cliente,HttpStatus.CREATED);

	}

	@PutMapping("/clientes/{id}")
	public ResponseEntity<?> update(@RequestBody Cliente cliente, @PathVariable Long id) {
		Cliente clienteActual = clienteService.findById(id);
		

		Map<String, Object> reponse = new HashMap<String, Object>();
		
		if(null == clienteActual) {
			reponse.put("mensaje","El cliente con Id ".concat(id.toString()).concat(" no existe."));
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.NOT_FOUND);
		}

		Cliente clienteUpdated = null;

		try{
			clienteActual.setApellido(cliente.getApellido());
			// Mas set
  			clienteUpdate = clienteService.save(clienteActual);

		} catch(DataAccessException dae) {
			reponse.put("mensaje","Error al actualizar en BBDD con Id ".concat(id.toString()));
			reponse.put("error",e.getMessage());
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.INTERNAL_SERVER_ERROR);

		}
		
		reponse.put("mensaje","El cliente con Id ".concat(id.toString()).concat(" ACTUALIZADO!!!."));
		reponse.put("cliente",clienteUpdated);

		return new ResponseEntity<Map<String, Object>>(reponse,HttpStatus.OK);

	}

	@DeleteMapping("/clientes/{id}")
	public ResponseEntity<?> delete(@PathVariable Long id) {
		
		Map<String, Object> reponse = new HashMap<String, Object>();
		
		try{
			clienteService.delete(clienteActual);
		} catch(DataAccessException dae) {
			reponse.put("mensaje","Error al borrar en BBDD con Id ".concat(id.toString()));
			reponse.put("error",e.getMessage());
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.INTERNAL_SERVER_ERROR);

		}
		
		reponse.put("mensaje","El cliente con Id ".concat(id.toString()).concat(" BORRADO!!!."));
		return new ResponseEntity<Map<String, Object>>(response,HttpStatus.OK);

	}

}
